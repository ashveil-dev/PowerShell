Ask-AI PowerShell Script

Ask-AI
Description

Ask-AI is a PowerShell script written by CaliNux that allows you to interact with the OpenAI API to generate responses to prompts using the powerful Text-Davinci-003 engine. With this script, you can leverage the capabilities of OpenAI to obtain intelligent and contextually relevant responses.
Prerequisites

Before using this script, make sure you have the following:

    An OpenAI API key: Obtain your API key from the OpenAI website (https://openai.com) and replace 'YOUR OPEN AI API' with your actual API key in the script.

How to Use

    Save the script in a file named Ask-AI.ps1.

    Open a PowerShell terminal or PowerShell ISE.

    Run the script using the following command:
    
    .\Ask-AI.ps1

    The script will prompt you to enter your input. Type your prompt and press Enter.

    The script will send the prompt to the OpenAI API, and it will return a response generated by the Text-Davinci-003 engine.

    The generated response will be displayed in the console, helping you gain insights into various topics.

Parameters

    apiKey: Replace 'YOUR OPEN AI API' with your actual OpenAI API key. This key is required to authenticate your requests to the OpenAI API.

    apiEndpoint: This parameter holds the URL endpoint for the OpenAI API. It points to the Text-Davinci-003 engine.

Response Customization

You can customize the response generation by modifying the following parameters in the $body variable:

    prompt: The prompt to be sent to the API for generating the response. The script appends the user's input to this prompt.

    temperature: A higher value (e.g., 1.0) makes the response more random, while a lower value (e.g., 0.2) makes it more focused and deterministic.

    max_tokens: The maximum number of tokens in the response. It controls the length of the generated response.

    top_p: A probability threshold for the likelihood of the next token. Higher values (e.g., 1.0) make the response more focused, while lower values (e.g., 0.8) make it more random.

    frequency_penalty: Controls the diversity of the response. Higher values (e.g., 1.2) make the response more creative, while lower values (e.g., 0.2) make it more focused and repetitive.

    presence_penalty: Controls whether the response should include common or rare phrases. Higher values (e.g., 1.2) make the response more creative, while lower values (e.g., 0.2) make it more focused on common phrases.
